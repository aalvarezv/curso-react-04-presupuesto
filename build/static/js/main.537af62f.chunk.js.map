{"version":3,"sources":["component/Error.jsx","component/Pregunta.jsx","component/Formulario.jsx","component/Gasto.jsx","component/Listado.jsx","helpers.js","component/ControlPresupuesto.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Pregunta","guardarPresupuesto","guardarRestante","actualizarPregunta","useState","cantidad","guardarCantidad","error","guardarError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Formulario","guardarGasto","actualizarMostrarGastos","nombre","guardarNombre","trim","gasto","id","shortid","generate","Gasto","Listado","gastos","map","key","revisarPresupuesto","presupuesto","restante","ControlPresupuesto","App","mostrarpregunta","guardarGastos","mostrargastos","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAaeA,EAVD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACZ,OACI,uBAAGC,UAAU,4BAA4BD,ICiDlCE,EAlDE,SAAC,GAA+D,IAA9DC,EAA6D,EAA7DA,mBAAoBC,EAAyC,EAAzCA,gBAAiBC,EAAwB,EAAxBA,mBAAwB,EAExCC,mBAAS,GAF+B,mBAErEC,EAFqE,KAE3DC,EAF2D,OAG9CF,oBAAS,GAHqC,mBAGrEG,EAHqE,KAG9DC,EAH8D,KA0B5E,OACI,kBAAC,WAAD,KACA,qDACCD,EAAS,kBAAC,EAAD,CAAOT,QAAQ,iCAAmC,KAC5D,0BAAMW,SApBiB,SAAAC,GACvBA,EAAEC,iBAGCN,EAAW,GAAKO,MAAMP,GACrBG,GAAa,IAIjBA,GAAa,GACbP,EAAmBI,GACnBH,EAAgBG,GAChBF,GAAmB,MASf,2BAAOU,KAAK,SACLd,UAAU,eACVe,YAAY,wBACZC,SA7BY,SAAAL,GACvBJ,EAAgBU,SAASN,EAAEO,OAAOC,MAAO,QA8BrC,2BAAOL,KAAK,SACJd,UAAU,8BACVmB,MAAM,2B,gBC+CXC,EApFI,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,aAAcC,EAA6B,EAA7BA,wBAA6B,EAE5BjB,mBAAS,IAFmB,mBAErDkB,EAFqD,KAE7CC,EAF6C,OAGxBnB,mBAAS,GAHe,mBAGrDC,EAHqD,KAG3CC,EAH2C,OAI9BF,oBAAS,GAJqB,mBAIrDG,EAJqD,KAI9CC,EAJ8C,KAsC5D,OACI,0BAAMC,SA7BW,SAAAC,GAIjB,GAHAA,EAAEC,iBAGCN,EAAW,GAAKO,MAAMP,IAA+B,KAAlBiB,EAAOE,OACzChB,GAAa,OADjB,CAMAA,GAAa,GACb,IAAMiB,EAAQ,CACVH,SACAjB,WACAqB,GAAGC,IAAQC,YAIfR,EAAaK,GACbJ,GAAwB,GAGxBE,EAAc,IACdjB,EAAgB,MAOZ,uDACCC,EAAQ,kBAAC,EAAD,CAAOT,QAAQ,4DAC+B,KACvD,yBAAKC,UAAU,SACX,+CACA,2BACIc,KAAK,OACLd,UAAU,eACVe,YAAY,iBACZI,MAAOI,EAEPP,SA7CM,SAAAL,GAClBa,EAAcb,EAAEO,OAAOC,WAgDnB,yBAAKnB,UAAU,SACX,iDACA,2BACIc,KAAK,SACLd,UAAU,eACVe,YAAY,UACZI,MAAOb,EAEPU,SAAU,SAAAL,GAAC,OAAIJ,EAAgBU,SAASN,EAAEO,OAAOC,YAKzD,2BACIL,KAAK,SACLd,UAAU,8BACVmB,MAAM,oBC5DPW,EAbD,SAAC,GAAD,IAAEJ,EAAF,EAAEA,MAAF,OAEV,wBAAI1B,UAAU,UACN,2BACK0B,EAAMH,OACP,0BAAMvB,UAAU,SAAhB,MAA4B0B,EAAMpB,aCcnCyB,EAlBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACd,OACA,yBAAKhC,UAAU,qBACX,uCACCgC,EAAOC,KAAI,SAAAP,GACV,OAAO,kBAAC,EAAD,CACGQ,IAAKR,EAAMC,GACXD,MAAOA,SCXdS,EAAqB,SAACC,EAAaC,GAU5C,OARKD,EAAc,EAAKC,EACZ,qBACAD,EAAc,EAAKC,EACnB,sBAEA,uBCgBDC,EAlBY,SAAC,GAA6B,IAA5BF,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SACtC,OACI,kBAAC,WAAD,KACI,yBAAKrC,UAAU,uBAAf,kBACoBoC,GAEpB,yBAAKpC,UAAWmC,EAAmBC,EAAaC,IAAhD,eACiBA,KC+DdE,MArEf,WAAgB,IAAD,EAE6BlC,mBAAS,GAFtC,mBAEN+B,EAFM,KAEOlC,EAFP,OAGuBG,mBAAS,GAHhC,mBAGNgC,EAHM,KAGIlC,EAHJ,OAIiCE,oBAAS,GAJ1C,mBAINmC,EAJM,KAIWpC,EAJX,OAKmBC,mBAAS,IAL5B,mBAKN2B,EALM,KAKES,EALF,OAMiBpC,mBAAS,IAN1B,mBAMNqB,EANM,KAMCL,EAND,OAOoChB,oBAAS,GAP7C,mBAONqC,EAPM,KAOSpB,EAPT,KA0Bb,OAhBAqB,qBAAU,WACR,GAAGD,EAAc,CAGfD,EAAc,GAAD,mBACRT,GADQ,CAEXN,KAGF,IAAMkB,EAAsBP,EAAWX,EAAMpB,SAC7CH,EAAgByC,GAChBtB,GAAwB,MAG1B,CAACI,EAAOM,EAAQK,EAAUK,IAG1B,kBAAC,WAAD,KAEC,yBAAK1C,UAAU,aACd,gCACE,6CACA,yBAAKA,UAAU,iCACZwC,EAEG,kBAAC,EAAD,CACEtC,mBAAsBA,EACtBC,gBAAmBA,EACnBC,mBAAsBA,IAKzB,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACGqB,aAAgBA,EAChBC,wBAA2BA,KAGhC,yBAAKtB,UAAU,mBACb,kBAAC,EAAD,CACCgC,OAAQA,IAET,kBAAC,EAAD,CACEI,YAAaA,EACbC,SAAUA,WClDTQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.537af62f.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Error = ({mensaje}) => {\n    return ( \n        <p className=\"alert alert-danger error\">{mensaje}</p>\n     );\n}\n\nError.propTypes = {\n    mensaje : PropTypes.string.isRequired\n}\n\nexport default Error;","import React, {Fragment, useState} from 'react';\nimport PropTypes from 'prop-types'\nimport Error from './Error'\n\nconst Pregunta = ({guardarPresupuesto, guardarRestante, actualizarPregunta}) => {\n    //Definimos el state\n    const [cantidad, guardarCantidad] = useState(0);\n    const [error, guardarError] = useState(false);\n    //Funcion que lee el presupuesto con el obChange\n    const definirPresupuesto = e =>{\n        guardarCantidad(parseInt(e.target.value, 10))\n        //console.log(parseInt(e.target.value))        \n    }\n    //Submit para definir el presupuesto\n    const agregarPresupuesto = e =>{\n        e.preventDefault()\n\n        //Validar\n        if(cantidad < 1 || isNaN(cantidad)){\n            guardarError(true)\n            return\n        }\n        //Si se pasa la validación\n        guardarError(false)\n        guardarPresupuesto(cantidad)\n        guardarRestante(cantidad)\n        actualizarPregunta(false)\n\n    } \n\n    return ( \n        <Fragment>\n        <h2>Coloca tu presupuesto</h2>\n        {error ?  <Error mensaje='El presupuesto es incorrecto' />: null}\n        <form onSubmit={agregarPresupuesto}>\n            <input type=\"number\" \n                   className=\"u-full-width\"\n                   placeholder=\"Coloca tu presupuesto\"\n                   onChange={definirPresupuesto}\n                   />\n            <input type=\"submit\"\n                    className=\"button-primary u-full-width\"\n                    value=\"Definir Presupuesto\"\n             />\n        </form>\n    </Fragment> )\n}\n\nPregunta.propTypes = {\n    guardarPresupuesto : PropTypes.func.isRequired,\n    guardarRestante : PropTypes.func.isRequired,\n    actualizarPregunta : PropTypes.func.isRequired\n}\n\nexport default Pregunta;","import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport Error from './Error'\nimport shortid from 'shortid'\n\nconst Formulario = ({guardarGasto, actualizarMostrarGastos}) => {\n\n    const [nombre, guardarNombre] = useState('')\n    const [cantidad, guardarCantidad] = useState(0)\n    const [error, guardarError] = useState(false)\n    \n    const agregarNombre = e => {\n        guardarNombre(e.target.value)\n    }\n\n    const agregarGasto = e =>{\n        e.preventDefault()\n        \n        //validar\n        if(cantidad < 1 || isNaN(cantidad) || nombre.trim() === ''){\n            guardarError(true)\n            return\n        }\n\n        //si pasa la validación, construir gasto\n        guardarError(false)\n        const gasto = {\n            nombre,\n            cantidad,\n            id:shortid.generate()\n        }\n      \n        //pasar el gasto al componente principal\n        guardarGasto(gasto)\n        actualizarMostrarGastos(true)\n\n        //resetear el formulario\n        guardarNombre('')\n        guardarCantidad(0)\n\n    }\n\n\n    return ( \n        <form onSubmit={agregarGasto}>\n            <h2>Agregar tus gastos aqui</h2>\n            {error ? <Error mensaje='Ambos campos son obligatorios \n                                    o presupuesto incorrecto' /> : null}\n            <div className=\"campo\">\n                <label>Nombre Gasto</label>\n                <input \n                    type=\"text\" \n                    className=\"u-full-width\"\n                    placeholder=\"Ej. transporte\"\n                    value={nombre}\n                    //Forma 1 pasa por una función\n                    onChange={agregarNombre}\n                />\n            </div>\n\n            <div className=\"campo\">\n                <label>Cantidad Gasto</label>\n                <input \n                    type=\"number\" \n                    className=\"u-full-width\"\n                    placeholder=\"Ej. 300\"\n                    value={cantidad}\n                    //Forma 2 directo con arrow function\n                    onChange={e => guardarCantidad(parseInt(e.target.value))}\n                    \n                />\n            </div>\n\n            <input \n                type=\"submit\"\n                className=\"button-primary u-full-width\"\n                value=\"Agregar gasto\"\n            />\n        </form>\n\n\n     );\n}\n\nFormulario.propTypes = {\n    guardarGasto : PropTypes.func.isRequired,\n    actualizarMostrarGastos : PropTypes.func.isRequired\n}\n \nexport default Formulario;","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Gasto = ({gasto}) => (\n    \n    <li className=\"gastos\">\n            <p>\n                {gasto.nombre}\n                <span className=\"gasto\"> $ {gasto.cantidad}</span>\n            </p>\n        </li>\n)\n \nGasto.propTypes = {\n    gasto : PropTypes.object.isRequired\n}\nexport default Gasto;","import React from 'react'\nimport Gasto from './Gasto'\nimport PropTypes from 'prop-types'\n\nconst Listado = ({gastos}) => {\n    return ( \n    <div className=\"gastos-realizados\">\n        <h2>Listado</h2>\n        {gastos.map(gasto => {\n          return <Gasto \n                    key={gasto.id}\n                    gasto={gasto} \n                 />\n        })}\n    </div> \n    );\n}\n\nListado.propTypes = {\n    gastos : PropTypes.array.isRequired\n}\n \nexport default Listado\n\n","export const revisarPresupuesto = (presupuesto, restante) => {\n    let clase;\n    if ((presupuesto / 4) > restante) {\n        clase = \"alert alert-danger\"\n    } else if ((presupuesto / 2) > restante) {\n        clase = \"alert alert-warning\"\n    } else {\n        clase = \"alert alert-success\"\n    }\n\n    return clase;\n}","import React, {Fragment} from 'react'\nimport PropTypes from 'prop-types'\nimport { revisarPresupuesto } from '../helpers'\n\n\nconst ControlPresupuesto = ({presupuesto, restante}) => {\n    return ( \n        <Fragment>\n            <div className=\"alert alert-primary\">\n                Presupuesto: $ {presupuesto}\n            </div>\n            <div className={revisarPresupuesto(presupuesto, restante)}>\n                Restante: $ {restante}\n            </div>\n        </Fragment> \n    );\n}\n\nControlPresupuesto.propTypes = {\n    presupuesto : PropTypes.number.isRequired,\n    restante : PropTypes.number.isRequired\n}\n\nexport default ControlPresupuesto;","import React, {Fragment, useState, useEffect} from 'react';\nimport Pregunta from './component/Pregunta'\nimport Formulario from './component/Formulario'\nimport Listado from './component/Listado'\nimport ControlPresupuesto from './component/ControlPresupuesto'\n\nfunction App() {\n\n  const [presupuesto, guardarPresupuesto] = useState(0)\n  const [restante, guardarRestante] = useState(0)\n  const [mostrarpregunta, actualizarPregunta] = useState(true)\n  const [gastos, guardarGastos] = useState([])\n  const [gasto, guardarGasto] = useState({})\n  const [mostrargastos, actualizarMostrarGastos] = useState(false)\n\n  //useEffect que actualiza el restante\n  useEffect(() =>{\n    if(mostrargastos){\n\n      //Agrega al presupuesto\n      guardarGastos([\n        ...gastos, \n        gasto\n      ])\n      //Resta del presupuesto actual\n      const presupuestoRestante = restante - gasto.cantidad\n      guardarRestante(presupuestoRestante)\n      actualizarMostrarGastos(false)\n    }\n   \n  },[gasto, gastos, restante, mostrargastos])\n\n  return (\n    <Fragment>\n\n     <div className=\"container\">\n      <header>\n        <h1>Gasto Semanal</h1>\n        <div className=\"contenido-principal contenido\" >\n          {mostrarpregunta ?\n            (\n              <Pregunta\n                guardarPresupuesto = {guardarPresupuesto}\n                guardarRestante = {guardarRestante}\n                actualizarPregunta = {actualizarPregunta}\n              />\n            )\n            : \n            (\n             <div className=\"row\">\n               <div className=\"one-half column\">\n                 <Formulario \n                    guardarGasto = {guardarGasto}\n                    actualizarMostrarGastos = {actualizarMostrarGastos}\n                 />\n               </div>\n               <div className=\"one-half column\">\n                 <Listado \n                  gastos={gastos}\n                 />\n                 <ControlPresupuesto\n                   presupuesto={presupuesto}\n                   restante={restante}\n                 />\n               </div>\n             </div>\n            ) \n          }\n        </div>\n      </header>\n    </div> \n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}